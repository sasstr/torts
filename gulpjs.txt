"use strict";

var  gulp = require('gulp'),
   gp = require('gulp-load-plugins')(), // подключаем все плагины которые начинаются на gulp- ...
   del = require("del"), // удаляем папку build перед новой сборкой
   pump = require("pump"), //помогает uglify работать без ошибок
   include = require("posthtml-include"),// вставляем в разметку SVG спрайт с помощью тега include
   server = require("browser-sync").create(), // запускаем локальный серевер
   autoprefixer = require("autoprefixer");  // раставляем вендорные префиксы


gulp.task("css", function () {
  return gulp.src("source/sass/style.scss")
    .pipe(gp.plumber())
    .pipe(gp.sourcemaps.init())
    .pipe(gp.sass())
    .pipe(gp.postcss([
      autoprefixer()     // расставляем автопрефиксы
    ]))
    //.pipe(gulp.dest("build/css"))
    .pipe(gp.csso())  // минифицируем CSS
    .pipe(gp.rename("style.min.css")) // меняем имя файла на style.min.css в разметке указать его
    .pipe(gp.sourcemaps.write('./maps'))
    .pipe(gulp.dest("build/css"))
    .pipe(server.stream());
});

gulp.task("js", function (cb) {
  pump([
      gulp.src("source/js/*.js"),
      gp.uglify(),
      gulp.dest("build/js")
    ],
    cb
  );
});

gulp.task("minify", function() {
  return gulp.src("build/*.html")
    .pipe(gp.htmlmin({ collapseWhitespace: true }))
    .pipe(gulp.dest("build"));
});

gulp.task("images", function() {  // сжимаем картинки можно делать паралельно !
  return gulp.src("source/img/**/*.{png,jpg,svg}")
    .pipe(imagemin([
      gp.imagemin.optipng({optimizationLevel: 3}),
      gp.imagemin.jpegtran({progressive: true}),
      gp.imagemin.svgo()
    ]))
    .pipe(gulp.dest("source/img"));
});

gulp.task("webp", function() {  // конвертируем изобрежиня в webp формат
  return gulp.src("source/img/**/*.{png,jpg}")
    .pipe(gp.webp({quality: 90}))
    .pipe(gulp.dest("source/img"));
});

gulp.task("sprite", function () { // создаем svg спрайт
  return gulp.src("source/img/icon-*.svg")
    .pipe(gp.svgstore({
      inlineSvg: true
    }))
    .pipe(gp.rename("sprite.svg"))
    .pipe(gulp.dest("build/img"));
});

gulp.task("html", function () {  // вставляем svg спрайт в разметку
  return gulp.src("source/*.html")
    .pipe(gp.posthtml([
      include()
    ]))
    .pipe(gulp.dest("build"));
});

gulp.task("copy", function () {  // копируем все файлы проекта в папку build
  return gulp.src([
    "source/fonts/**/*.{woff,woff2}",
    "source/img/**",
    "source/js/**",
    "source/**/*.html"
  ], {
    base: "source"
  })
    .pipe(gulp.dest("build"));
});

gulp.task("clean", function () {  // удаелеяем папку с содежимым build перед каждой новой сборкой
  return del("build");
});

gulp.task("build", gulp.series(  // собираем проект запуская таски
  "clean",
  "copy",
  "css",
  "sprite",
  "html",
  "minify",
  "js"
));

gulp.task("server", function () {  // отслеживаем изменения в файлах и пересобираем проект
  server.init({
    server: "build/",
  });

  gulp.watch("source/js/**/*", gulp.series("js", "refresh"));
  gulp.watch("source/sass/**/*.{scss,sass}", gulp.series("css"));
  gulp.watch("source/img/icon-*.svg", gulp.series("sprite", "html", "refresh"));
  gulp.watch("source/*.html", gulp.series("html", "refresh"));
});

gulp.task("refresh", function (done){
  server.reload();
  done();
});

gulp.task("start", gulp.series("build", "server"));
